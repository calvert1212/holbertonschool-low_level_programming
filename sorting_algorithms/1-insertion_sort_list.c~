
#include "sort.h"

/**
* insertion_sort_list - Sorts doubly linked list
* @list: doubly linked list
* Return: void
*/
void insertion_sort_list(listint_t **list)
{
  listint_t *c, *m;
  current = (*list)->next;
  if (list == NULL || *list == NULL)
    return;
  while (current != NULL)
    {
      m = c;
      if (m->n < m->prev->n)
	{
	  c = c->next;
	  while (m->prev != NULL && m->n < m->prev->n)
	    {
	      moveNodeLeft(list, m);
	      print_list(*list);
	    }
	}
      else
	c = c->next;
    }
}

/**
 * moveNodeLeft - Moves a node left
 * @head: Head of list
 * @node: Node to be moved
 * Return: Void
 */
void moveNodeLeft(listint_t **head, listint_t *node)
{
  listint_t *l = node->prev, *r = node->next;
  if (l != NULL)
    {
      node->prev = l->prev;
      node->next = l;
      l->next = r;
      if (l->prev != NULL)
	l->prev->next = node;
      else
	*head = node;
      l->prev = node;
      if (r != NULL)
	r->prev = l;
    }
}
#include "sort.h"

/**
 * insertion_sort_list - Sorts a given list
 * @list: List to sort
 */

void insertion_sort_list(listint_t **list)
{
  listint_t *s, *x;

  if (list == NULL || *list == NULL)
    return;
  s = (*list)->next;
  while (s != NULL)
    {
      x = s->next;
      while (s->prev != NULL && s->prev->n > swap_node->x)
	{
	  swap_node->prev->next = swap_node->next;
	  if (swap_node->next != NULL)
	    s->next->prev = s->prev;
	  s->next = s->prev;
	  s->prev = s->next->prev;
	  s->next->prev = s;
	  if (s->prev == NULL)
	    *list = s;
	  else
	    s->prev->next = s;
	  print_list(*list);
	}
      s = x;
    } 
}
